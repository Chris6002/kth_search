// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="execute,hls_ip_2018_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=211,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=468,HLS_SYN_LUT=752,HLS_VERSION=2018_2_2}" *)

module execute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        points_address0,
        points_ce0,
        points_q0,
        points_address1,
        points_ce1,
        points_q1,
        q_address0,
        q_ce0,
        q_q0,
        result_address0,
        result_ce0,
        result_we0,
        result_d0,
        result_q0,
        result_address1,
        result_ce1,
        result_we1,
        result_d1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_pp0_stage0 = 10'd32;
parameter    ap_ST_fsm_state8 = 10'd64;
parameter    ap_ST_fsm_pp1_stage0 = 10'd128;
parameter    ap_ST_fsm_pp1_stage1 = 10'd256;
parameter    ap_ST_fsm_state14 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] points_address0;
output   points_ce0;
input  [31:0] points_q0;
output  [8:0] points_address1;
output   points_ce1;
input  [31:0] points_q1;
output  [1:0] q_address0;
output   q_ce0;
input  [31:0] q_q0;
output  [0:0] result_address0;
output   result_ce0;
output   result_we0;
output  [31:0] result_d0;
input  [31:0] result_q0;
output  [0:0] result_address1;
output   result_ce1;
output   result_we1;
output  [31:0] result_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] points_address0;
reg points_ce0;
reg[8:0] points_address1;
reg points_ce1;
reg q_ce0;
reg[0:0] result_address0;
reg result_ce0;
reg result_we0;
reg[31:0] result_d0;
reg[0:0] result_address1;
reg result_ce1;
reg result_we1;
reg[31:0] result_d1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [1:0] query_address0;
reg    query_ce0;
wire   [31:0] query_q0;
reg   [1:0] query_address1;
reg    query_ce1;
reg    query_we1;
wire   [31:0] query_q1;
reg   [1:0] i_i_reg_192;
reg   [6:0] index_assign_reg_203;
reg   [6:0] index_assign_reg_203_pp1_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_state13_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire  signed [31:0] grp_fu_221_p2;
reg  signed [31:0] reg_227;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state10_pp1_stage1_iter0;
wire    ap_block_state12_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] exitcond_reg_450;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state2;
wire  signed [31:0] grp_fu_215_p2;
reg  signed [31:0] tmp_i_reg_388;
reg  signed [31:0] tmp_4_i_reg_394;
wire    ap_CS_fsm_state3;
wire  signed [31:0] tmp_6_i_fu_237_p2;
reg  signed [31:0] tmp_6_i_reg_400;
wire   [31:0] tmp_3_i_fu_243_p2;
reg   [31:0] tmp_3_i_reg_406;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_5_i_fu_247_p2;
reg   [31:0] tmp_5_i_reg_411;
wire   [31:0] tmp_7_i_fu_251_p2;
reg   [31:0] tmp_7_i_reg_416;
wire   [0:0] result_addr_reg_421;
wire    ap_CS_fsm_state5;
wire   [0:0] result_addr_1_reg_426;
wire   [0:0] exitcond_i_fu_265_p2;
reg   [0:0] exitcond_i_reg_431;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] i_fu_271_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_i7_fu_277_p1;
reg   [63:0] tmp_i7_reg_440;
wire   [0:0] exitcond_fu_282_p2;
wire  signed [9:0] tmp_4_fu_304_p2;
reg  signed [9:0] tmp_4_reg_454;
wire  signed [31:0] tmp_4_i_i_fu_336_p2;
reg  signed [31:0] tmp_4_i_i_reg_474;
wire   [6:0] i_1_fu_342_p2;
reg   [6:0] i_1_reg_480;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] tmp_3_i_i_reg_485;
wire   [31:0] tmp_5_i_i_fu_348_p2;
reg   [31:0] tmp_5_i_i_reg_490;
reg   [31:0] tmp_7_i_i_reg_495;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state8;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state9;
wire    ap_block_pp1_stage1_subdone;
reg    ap_enable_reg_pp1_iter2;
reg   [6:0] ap_phi_mux_index_assign_phi_fu_207_p4;
wire    ap_block_pp1_stage0;
wire    ap_block_pp0_stage0;
wire  signed [63:0] tmp_4_cast_fu_310_p1;
wire  signed [63:0] tmp_5_cast_fu_321_p1;
wire  signed [63:0] tmp_6_cast_fu_331_p1;
wire    ap_block_pp1_stage1;
wire   [31:0] tmp_9_i_fu_259_p2;
wire   [0:0] tmp_i9_fu_367_p2;
wire   [31:0] distance_fu_361_p2;
wire   [31:0] index_assign_cast2_fu_352_p1;
wire   [31:0] tmp_fu_255_p2;
wire   [8:0] tmp_3_fu_292_p3;
wire   [9:0] p_shl_cast_fu_300_p1;
wire   [9:0] tmp_1_cast_fu_288_p1;
wire   [9:0] tmp_5_fu_315_p2;
wire   [9:0] tmp_6_fu_326_p2;
wire   [31:0] tmp1_fu_357_p2;
wire    ap_CS_fsm_state14;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
end

execute_query #(
    .DataWidth( 32 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
query_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(query_address0),
    .ce0(query_ce0),
    .q0(query_q0),
    .address1(query_address1),
    .ce1(query_ce1),
    .we1(query_we1),
    .d1(q_q0),
    .q1(query_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state9))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state9)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_fu_265_p2 == 1'd0))) begin
        i_i_reg_192 <= i_fu_271_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_192 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        index_assign_reg_203 <= 7'd1;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_reg_450 == 1'd0))) begin
        index_assign_reg_203 <= i_1_reg_480;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_i_reg_431 <= exitcond_i_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        exitcond_reg_450 <= exitcond_fu_282_p2;
        index_assign_reg_203_pp1_iter1_reg <= index_assign_reg_203;
        tmp_5_i_i_reg_490 <= tmp_5_i_i_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_450 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        i_1_reg_480 <= i_1_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_450 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1)))) begin
        reg_227 <= grp_fu_221_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        tmp_3_i_i_reg_485 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_3_i_reg_406 <= tmp_3_i_fu_243_p2;
        tmp_5_i_reg_411 <= tmp_5_i_fu_247_p2;
        tmp_7_i_reg_416 <= tmp_7_i_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (exitcond_reg_450 == 1'd0) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        tmp_4_i_i_reg_474 <= tmp_4_i_i_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_4_i_reg_394 <= grp_fu_215_p2;
        tmp_6_i_reg_400 <= tmp_6_i_fu_237_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (exitcond_fu_282_p2 == 1'd0))) begin
        tmp_4_reg_454 <= tmp_4_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        tmp_7_i_i_reg_495 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_fu_265_p2 == 1'd0))) begin
        tmp_i7_reg_440[1 : 0] <= tmp_i7_fu_277_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_i_reg_388 <= grp_fu_215_p2;
    end
end

always @ (*) begin
    if ((exitcond_i_fu_265_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_282_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (exitcond_reg_450 == 1'd0))) begin
        ap_phi_mux_index_assign_phi_fu_207_p4 = i_1_reg_480;
    end else begin
        ap_phi_mux_index_assign_phi_fu_207_p4 = index_assign_reg_203;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        points_address0 = tmp_5_cast_fu_321_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        points_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        points_address0 = 64'd0;
    end else begin
        points_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        points_address1 = tmp_6_cast_fu_331_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        points_address1 = tmp_4_cast_fu_310_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        points_address1 = 64'd2;
    end else begin
        points_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        points_ce0 = 1'b1;
    end else begin
        points_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        points_ce1 = 1'b1;
    end else begin
        points_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        q_ce0 = 1'b1;
    end else begin
        q_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        query_address0 = 2'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        query_address0 = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        query_address0 = 2'd0;
    end else begin
        query_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        query_address1 = 2'd1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        query_address1 = tmp_i7_reg_440;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        query_address1 = 2'd2;
    end else begin
        query_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        query_ce0 = 1'b1;
    end else begin
        query_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        query_ce1 = 1'b1;
    end else begin
        query_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (exitcond_i_reg_431 == 1'd0))) begin
        query_we1 = 1'b1;
    end else begin
        query_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        result_address0 = result_addr_reg_421;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_address0 = 64'd0;
    end else begin
        result_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        result_address1 = result_addr_1_reg_426;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_address1 = 64'd1;
    end else begin
        result_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b0 == ap_block_pp1_stage1_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        result_ce0 = 1'b1;
    end else begin
        result_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        result_ce1 = 1'b1;
    end else begin
        result_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        result_d0 = distance_fu_361_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_d0 = tmp_9_i_fu_259_p2;
    end else begin
        result_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1))) begin
        result_d1 = index_assign_cast2_fu_352_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        result_d1 = 32'd0;
    end else begin
        result_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i9_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        result_we0 = 1'b1;
    end else begin
        result_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b0 == ap_block_pp1_stage0_11001) & (tmp_i9_fu_367_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
        result_we1 = 1'b1;
    end else begin
        result_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_i_fu_265_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_282_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (exitcond_fu_282_p2 == 1'd1) & (ap_enable_reg_pp1_iter1 == 1'b0)) | ((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign distance_fu_361_p2 = (tmp_5_i_i_reg_490 + tmp1_fu_357_p2);

assign exitcond_fu_282_p2 = ((ap_phi_mux_index_assign_phi_fu_207_p4 == 7'd100) ? 1'b1 : 1'b0);

assign exitcond_i_fu_265_p2 = ((i_i_reg_192 == 2'd3) ? 1'b1 : 1'b0);

assign grp_fu_215_p2 = (query_q0 - points_q0);

assign grp_fu_221_p2 = (query_q0 - points_q1);

assign grp_fu_231_p2 = ($signed(reg_227) * $signed(reg_227));

assign i_1_fu_342_p2 = (index_assign_reg_203 + 7'd1);

assign i_fu_271_p2 = (i_i_reg_192 + 2'd1);

assign index_assign_cast2_fu_352_p1 = index_assign_reg_203_pp1_iter1_reg;

assign p_shl_cast_fu_300_p1 = tmp_3_fu_292_p3;

assign q_address0 = tmp_i7_fu_277_p1;

assign result_addr_1_reg_426 = 64'd1;

assign result_addr_reg_421 = 64'd0;

assign tmp1_fu_357_p2 = (tmp_7_i_i_reg_495 + tmp_3_i_i_reg_485);

assign tmp_1_cast_fu_288_p1 = ap_phi_mux_index_assign_phi_fu_207_p4;

assign tmp_3_fu_292_p3 = {{ap_phi_mux_index_assign_phi_fu_207_p4}, {2'd0}};

assign tmp_3_i_fu_243_p2 = ($signed(tmp_i_reg_388) * $signed(tmp_i_reg_388));

assign tmp_4_cast_fu_310_p1 = tmp_4_fu_304_p2;

assign tmp_4_fu_304_p2 = (p_shl_cast_fu_300_p1 - tmp_1_cast_fu_288_p1);

assign tmp_4_i_i_fu_336_p2 = (query_q1 - points_q0);

assign tmp_5_cast_fu_321_p1 = $signed(tmp_5_fu_315_p2);

assign tmp_5_fu_315_p2 = ($signed(tmp_4_fu_304_p2) + $signed(10'd1));

assign tmp_5_i_fu_247_p2 = ($signed(tmp_4_i_reg_394) * $signed(tmp_4_i_reg_394));

assign tmp_5_i_i_fu_348_p2 = ($signed(tmp_4_i_i_reg_474) * $signed(tmp_4_i_i_reg_474));

assign tmp_6_cast_fu_331_p1 = $signed(tmp_6_fu_326_p2);

assign tmp_6_fu_326_p2 = ($signed(tmp_4_reg_454) + $signed(10'd2));

assign tmp_6_i_fu_237_p2 = (query_q1 - points_q1);

assign tmp_7_i_fu_251_p2 = ($signed(tmp_6_i_reg_400) * $signed(tmp_6_i_reg_400));

assign tmp_9_i_fu_259_p2 = (tmp_fu_255_p2 + tmp_5_i_reg_411);

assign tmp_fu_255_p2 = (tmp_3_i_reg_406 + tmp_7_i_reg_416);

assign tmp_i7_fu_277_p1 = i_i_reg_192;

assign tmp_i9_fu_367_p2 = (($signed(distance_fu_361_p2) < $signed(result_q0)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_i7_reg_440[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //execute
