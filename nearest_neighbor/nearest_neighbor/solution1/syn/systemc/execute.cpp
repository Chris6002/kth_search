// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "execute.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic execute::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic execute::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> execute::ap_ST_fsm_state1 = "1";
const sc_lv<10> execute::ap_ST_fsm_state2 = "10";
const sc_lv<10> execute::ap_ST_fsm_state3 = "100";
const sc_lv<10> execute::ap_ST_fsm_state4 = "1000";
const sc_lv<10> execute::ap_ST_fsm_state5 = "10000";
const sc_lv<10> execute::ap_ST_fsm_pp0_stage0 = "100000";
const sc_lv<10> execute::ap_ST_fsm_state8 = "1000000";
const sc_lv<10> execute::ap_ST_fsm_pp1_stage0 = "10000000";
const sc_lv<10> execute::ap_ST_fsm_pp1_stage1 = "100000000";
const sc_lv<10> execute::ap_ST_fsm_state14 = "1000000000";
const sc_lv<32> execute::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool execute::ap_const_boolean_1 = true;
const sc_lv<32> execute::ap_const_lv32_7 = "111";
const bool execute::ap_const_boolean_0 = false;
const sc_lv<32> execute::ap_const_lv32_8 = "1000";
const sc_lv<1> execute::ap_const_lv1_0 = "0";
const sc_lv<32> execute::ap_const_lv32_1 = "1";
const sc_lv<32> execute::ap_const_lv32_2 = "10";
const sc_lv<32> execute::ap_const_lv32_3 = "11";
const sc_lv<32> execute::ap_const_lv32_4 = "100";
const sc_lv<32> execute::ap_const_lv32_5 = "101";
const sc_lv<1> execute::ap_const_lv1_1 = "1";
const sc_lv<32> execute::ap_const_lv32_6 = "110";
const sc_lv<2> execute::ap_const_lv2_0 = "00";
const sc_lv<7> execute::ap_const_lv7_1 = "1";
const sc_lv<64> execute::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> execute::ap_const_lv64_1 = "1";
const sc_lv<64> execute::ap_const_lv64_2 = "10";
const sc_lv<2> execute::ap_const_lv2_1 = "1";
const sc_lv<2> execute::ap_const_lv2_2 = "10";
const sc_lv<2> execute::ap_const_lv2_3 = "11";
const sc_lv<7> execute::ap_const_lv7_64 = "1100100";
const sc_lv<10> execute::ap_const_lv10_1 = "1";
const sc_lv<10> execute::ap_const_lv10_2 = "10";
const sc_lv<32> execute::ap_const_lv32_9 = "1001";

execute::execute(sc_module_name name) : sc_module(name), mVcdFile(0) {
    query_U = new execute_query("query_U");
    query_U->clk(ap_clk);
    query_U->reset(ap_rst);
    query_U->address0(query_address0);
    query_U->ce0(query_ce0);
    query_U->q0(query_q0);
    query_U->address1(query_address1);
    query_U->ce1(query_ce1);
    query_U->we1(query_we1);
    query_U->d1(q_q0);
    query_U->q1(query_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_pp1_stage1);

    SC_METHOD(thread_ap_block_pp1_stage1_11001);

    SC_METHOD(thread_ap_block_pp1_stage1_subdone);

    SC_METHOD(thread_ap_block_state10_pp1_stage1_iter0);

    SC_METHOD(thread_ap_block_state11_pp1_stage0_iter1);

    SC_METHOD(thread_ap_block_state12_pp1_stage1_iter1);

    SC_METHOD(thread_ap_block_state13_pp1_stage0_iter2);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state9_pp1_stage0_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state6);
    sensitive << ( exitcond_i_fu_265_p2 );

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state9);
    sensitive << ( exitcond_fu_282_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_ap_phi_mux_index_assign_phi_fu_207_p4);
    sensitive << ( index_assign_reg_203 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( exitcond_reg_450 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( i_1_reg_480 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_distance_fu_361_p2);
    sensitive << ( tmp_5_i_i_reg_490 );
    sensitive << ( tmp1_fu_357_p2 );

    SC_METHOD(thread_exitcond_fu_282_p2);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_phi_mux_index_assign_phi_fu_207_p4 );

    SC_METHOD(thread_exitcond_i_fu_265_p2);
    sensitive << ( i_i_reg_192 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_grp_fu_215_p2);
    sensitive << ( points_q0 );
    sensitive << ( query_q0 );

    SC_METHOD(thread_grp_fu_221_p2);
    sensitive << ( points_q1 );
    sensitive << ( query_q0 );

    SC_METHOD(thread_grp_fu_231_p2);
    sensitive << ( reg_227 );

    SC_METHOD(thread_i_1_fu_342_p2);
    sensitive << ( index_assign_reg_203 );

    SC_METHOD(thread_i_fu_271_p2);
    sensitive << ( i_i_reg_192 );

    SC_METHOD(thread_index_assign_cast2_fu_352_p1);
    sensitive << ( index_assign_reg_203_pp1_iter1_reg );

    SC_METHOD(thread_p_shl_cast_fu_300_p1);
    sensitive << ( tmp_3_fu_292_p3 );

    SC_METHOD(thread_points_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_5_cast_fu_321_p1 );

    SC_METHOD(thread_points_address1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_4_cast_fu_310_p1 );
    sensitive << ( tmp_6_cast_fu_331_p1 );
    sensitive << ( ap_block_pp1_stage1 );

    SC_METHOD(thread_points_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_points_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_q_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_i7_fu_277_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_q_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_query_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage1 );

    SC_METHOD(thread_query_address1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_i7_reg_440 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_query_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_query_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_query_we1);
    sensitive << ( exitcond_i_reg_431 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_result_addr_1_reg_426);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_result_addr_reg_421);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_result_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( result_addr_reg_421 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage1 );

    SC_METHOD(thread_result_address1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( result_addr_1_reg_426 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_result_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_pp1_stage1 );
    sensitive << ( ap_block_pp1_stage1_11001 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_result_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_METHOD(thread_result_d0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_9_i_fu_259_p2 );
    sensitive << ( distance_fu_361_p2 );

    SC_METHOD(thread_result_d1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( index_assign_cast2_fu_352_p1 );

    SC_METHOD(thread_result_we0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_i9_fu_367_p2 );

    SC_METHOD(thread_result_we1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( tmp_i9_fu_367_p2 );

    SC_METHOD(thread_tmp1_fu_357_p2);
    sensitive << ( tmp_3_i_i_reg_485 );
    sensitive << ( tmp_7_i_i_reg_495 );

    SC_METHOD(thread_tmp_1_cast_fu_288_p1);
    sensitive << ( ap_phi_mux_index_assign_phi_fu_207_p4 );

    SC_METHOD(thread_tmp_3_fu_292_p3);
    sensitive << ( ap_phi_mux_index_assign_phi_fu_207_p4 );

    SC_METHOD(thread_tmp_3_i_fu_243_p2);
    sensitive << ( tmp_i_reg_388 );

    SC_METHOD(thread_tmp_4_cast_fu_310_p1);
    sensitive << ( tmp_4_fu_304_p2 );

    SC_METHOD(thread_tmp_4_fu_304_p2);
    sensitive << ( p_shl_cast_fu_300_p1 );
    sensitive << ( tmp_1_cast_fu_288_p1 );

    SC_METHOD(thread_tmp_4_i_i_fu_336_p2);
    sensitive << ( points_q0 );
    sensitive << ( query_q1 );

    SC_METHOD(thread_tmp_5_cast_fu_321_p1);
    sensitive << ( tmp_5_fu_315_p2 );

    SC_METHOD(thread_tmp_5_fu_315_p2);
    sensitive << ( tmp_4_fu_304_p2 );

    SC_METHOD(thread_tmp_5_i_fu_247_p2);
    sensitive << ( tmp_4_i_reg_394 );

    SC_METHOD(thread_tmp_5_i_i_fu_348_p2);
    sensitive << ( tmp_4_i_i_reg_474 );

    SC_METHOD(thread_tmp_6_cast_fu_331_p1);
    sensitive << ( tmp_6_fu_326_p2 );

    SC_METHOD(thread_tmp_6_fu_326_p2);
    sensitive << ( tmp_4_reg_454 );

    SC_METHOD(thread_tmp_6_i_fu_237_p2);
    sensitive << ( points_q1 );
    sensitive << ( query_q1 );

    SC_METHOD(thread_tmp_7_i_fu_251_p2);
    sensitive << ( tmp_6_i_reg_400 );

    SC_METHOD(thread_tmp_9_i_fu_259_p2);
    sensitive << ( tmp_5_i_reg_411 );
    sensitive << ( tmp_fu_255_p2 );

    SC_METHOD(thread_tmp_fu_255_p2);
    sensitive << ( tmp_3_i_reg_406 );
    sensitive << ( tmp_7_i_reg_416 );

    SC_METHOD(thread_tmp_i7_fu_277_p1);
    sensitive << ( i_i_reg_192 );

    SC_METHOD(thread_tmp_i9_fu_367_p2);
    sensitive << ( result_q0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter2 );
    sensitive << ( distance_fu_361_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( exitcond_i_fu_265_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_fu_282_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp1_stage0_subdone );
    sensitive << ( ap_block_pp1_stage1_subdone );
    sensitive << ( ap_enable_reg_pp1_iter2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000001";
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "execute_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, points_address0, "(port)points_address0");
    sc_trace(mVcdFile, points_ce0, "(port)points_ce0");
    sc_trace(mVcdFile, points_q0, "(port)points_q0");
    sc_trace(mVcdFile, points_address1, "(port)points_address1");
    sc_trace(mVcdFile, points_ce1, "(port)points_ce1");
    sc_trace(mVcdFile, points_q1, "(port)points_q1");
    sc_trace(mVcdFile, q_address0, "(port)q_address0");
    sc_trace(mVcdFile, q_ce0, "(port)q_ce0");
    sc_trace(mVcdFile, q_q0, "(port)q_q0");
    sc_trace(mVcdFile, result_address0, "(port)result_address0");
    sc_trace(mVcdFile, result_ce0, "(port)result_ce0");
    sc_trace(mVcdFile, result_we0, "(port)result_we0");
    sc_trace(mVcdFile, result_d0, "(port)result_d0");
    sc_trace(mVcdFile, result_q0, "(port)result_q0");
    sc_trace(mVcdFile, result_address1, "(port)result_address1");
    sc_trace(mVcdFile, result_ce1, "(port)result_ce1");
    sc_trace(mVcdFile, result_we1, "(port)result_we1");
    sc_trace(mVcdFile, result_d1, "(port)result_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, query_address0, "query_address0");
    sc_trace(mVcdFile, query_ce0, "query_ce0");
    sc_trace(mVcdFile, query_q0, "query_q0");
    sc_trace(mVcdFile, query_address1, "query_address1");
    sc_trace(mVcdFile, query_ce1, "query_ce1");
    sc_trace(mVcdFile, query_we1, "query_we1");
    sc_trace(mVcdFile, query_q1, "query_q1");
    sc_trace(mVcdFile, i_i_reg_192, "i_i_reg_192");
    sc_trace(mVcdFile, index_assign_reg_203, "index_assign_reg_203");
    sc_trace(mVcdFile, index_assign_reg_203_pp1_iter1_reg, "index_assign_reg_203_pp1_iter1_reg");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state9_pp1_stage0_iter0, "ap_block_state9_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state11_pp1_stage0_iter1, "ap_block_state11_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state13_pp1_stage0_iter2, "ap_block_state13_pp1_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, grp_fu_221_p2, "grp_fu_221_p2");
    sc_trace(mVcdFile, reg_227, "reg_227");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage1, "ap_CS_fsm_pp1_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, ap_block_state10_pp1_stage1_iter0, "ap_block_state10_pp1_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state12_pp1_stage1_iter1, "ap_block_state12_pp1_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage1_11001, "ap_block_pp1_stage1_11001");
    sc_trace(mVcdFile, exitcond_reg_450, "exitcond_reg_450");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_fu_215_p2, "grp_fu_215_p2");
    sc_trace(mVcdFile, tmp_i_reg_388, "tmp_i_reg_388");
    sc_trace(mVcdFile, tmp_4_i_reg_394, "tmp_4_i_reg_394");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_6_i_fu_237_p2, "tmp_6_i_fu_237_p2");
    sc_trace(mVcdFile, tmp_6_i_reg_400, "tmp_6_i_reg_400");
    sc_trace(mVcdFile, tmp_3_i_fu_243_p2, "tmp_3_i_fu_243_p2");
    sc_trace(mVcdFile, tmp_3_i_reg_406, "tmp_3_i_reg_406");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_5_i_fu_247_p2, "tmp_5_i_fu_247_p2");
    sc_trace(mVcdFile, tmp_5_i_reg_411, "tmp_5_i_reg_411");
    sc_trace(mVcdFile, tmp_7_i_fu_251_p2, "tmp_7_i_fu_251_p2");
    sc_trace(mVcdFile, tmp_7_i_reg_416, "tmp_7_i_reg_416");
    sc_trace(mVcdFile, result_addr_reg_421, "result_addr_reg_421");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, result_addr_1_reg_426, "result_addr_1_reg_426");
    sc_trace(mVcdFile, exitcond_i_fu_265_p2, "exitcond_i_fu_265_p2");
    sc_trace(mVcdFile, exitcond_i_reg_431, "exitcond_i_reg_431");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter0, "ap_block_state6_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter1, "ap_block_state7_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_fu_271_p2, "i_fu_271_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_i7_fu_277_p1, "tmp_i7_fu_277_p1");
    sc_trace(mVcdFile, tmp_i7_reg_440, "tmp_i7_reg_440");
    sc_trace(mVcdFile, exitcond_fu_282_p2, "exitcond_fu_282_p2");
    sc_trace(mVcdFile, tmp_4_fu_304_p2, "tmp_4_fu_304_p2");
    sc_trace(mVcdFile, tmp_4_reg_454, "tmp_4_reg_454");
    sc_trace(mVcdFile, tmp_4_i_i_fu_336_p2, "tmp_4_i_i_fu_336_p2");
    sc_trace(mVcdFile, tmp_4_i_i_reg_474, "tmp_4_i_i_reg_474");
    sc_trace(mVcdFile, i_1_fu_342_p2, "i_1_fu_342_p2");
    sc_trace(mVcdFile, i_1_reg_480, "i_1_reg_480");
    sc_trace(mVcdFile, grp_fu_231_p2, "grp_fu_231_p2");
    sc_trace(mVcdFile, tmp_3_i_i_reg_485, "tmp_3_i_i_reg_485");
    sc_trace(mVcdFile, tmp_5_i_i_fu_348_p2, "tmp_5_i_i_fu_348_p2");
    sc_trace(mVcdFile, tmp_5_i_i_reg_490, "tmp_5_i_i_reg_490");
    sc_trace(mVcdFile, tmp_7_i_i_reg_495, "tmp_7_i_i_reg_495");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state6, "ap_condition_pp0_exit_iter0_state6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state9, "ap_condition_pp1_exit_iter0_state9");
    sc_trace(mVcdFile, ap_block_pp1_stage1_subdone, "ap_block_pp1_stage1_subdone");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter2, "ap_enable_reg_pp1_iter2");
    sc_trace(mVcdFile, ap_phi_mux_index_assign_phi_fu_207_p4, "ap_phi_mux_index_assign_phi_fu_207_p4");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, tmp_4_cast_fu_310_p1, "tmp_4_cast_fu_310_p1");
    sc_trace(mVcdFile, tmp_5_cast_fu_321_p1, "tmp_5_cast_fu_321_p1");
    sc_trace(mVcdFile, tmp_6_cast_fu_331_p1, "tmp_6_cast_fu_331_p1");
    sc_trace(mVcdFile, ap_block_pp1_stage1, "ap_block_pp1_stage1");
    sc_trace(mVcdFile, tmp_9_i_fu_259_p2, "tmp_9_i_fu_259_p2");
    sc_trace(mVcdFile, tmp_i9_fu_367_p2, "tmp_i9_fu_367_p2");
    sc_trace(mVcdFile, distance_fu_361_p2, "distance_fu_361_p2");
    sc_trace(mVcdFile, index_assign_cast2_fu_352_p1, "index_assign_cast2_fu_352_p1");
    sc_trace(mVcdFile, tmp_fu_255_p2, "tmp_fu_255_p2");
    sc_trace(mVcdFile, tmp_3_fu_292_p3, "tmp_3_fu_292_p3");
    sc_trace(mVcdFile, p_shl_cast_fu_300_p1, "p_shl_cast_fu_300_p1");
    sc_trace(mVcdFile, tmp_1_cast_fu_288_p1, "tmp_1_cast_fu_288_p1");
    sc_trace(mVcdFile, tmp_5_fu_315_p2, "tmp_5_fu_315_p2");
    sc_trace(mVcdFile, tmp_6_fu_326_p2, "tmp_6_fu_326_p2");
    sc_trace(mVcdFile, tmp1_fu_357_p2, "tmp1_fu_357_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
    mHdltvinHandle.open("execute.hdltvin.dat");
    mHdltvoutHandle.open("execute.hdltvout.dat");
}

execute::~execute() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete query_U;
}

void execute::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state6.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state6.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state6.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state9.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage1_subdone.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()))) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state9.read())) {
                ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state9.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter2 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage1_subdone.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read())) || 
             (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read())))) {
            ap_enable_reg_pp1_iter2 = ap_enable_reg_pp1_iter1.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_enable_reg_pp1_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_265_p2.read()))) {
        i_i_reg_192 = i_fu_271_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_i_reg_192 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        index_assign_reg_203 = ap_const_lv7_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(exitcond_reg_450.read(), ap_const_lv1_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        index_assign_reg_203 = i_1_reg_480.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_i_reg_431 = exitcond_i_fu_265_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_450 = exitcond_fu_282_p2.read();
        index_assign_reg_203_pp1_iter1_reg = index_assign_reg_203.read();
        tmp_5_i_i_reg_490 = tmp_5_i_i_fu_348_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_reg_450.read(), ap_const_lv1_0))) {
        i_1_reg_480 = i_1_fu_342_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(exitcond_reg_450.read(), ap_const_lv1_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())))) {
        reg_227 = grp_fu_221_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        tmp_3_i_i_reg_485 = grp_fu_231_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_3_i_reg_406 = tmp_3_i_fu_243_p2.read();
        tmp_5_i_reg_411 = tmp_5_i_fu_247_p2.read();
        tmp_7_i_reg_416 = tmp_7_i_fu_251_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_reg_450.read(), ap_const_lv1_0))) {
        tmp_4_i_i_reg_474 = tmp_4_i_i_fu_336_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_4_i_reg_394 = grp_fu_215_p2.read();
        tmp_6_i_reg_400 = tmp_6_i_fu_237_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_282_p2.read()))) {
        tmp_4_reg_454 = tmp_4_fu_304_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()))) {
        tmp_7_i_i_reg_495 = grp_fu_231_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_265_p2.read()))) {
        tmp_i7_reg_440 = tmp_i7_fu_277_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_i_reg_388 = grp_fu_215_p2.read();
    }
}

void execute::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[5];
}

void execute::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[7];
}

void execute::thread_ap_CS_fsm_pp1_stage1() {
    ap_CS_fsm_pp1_stage1 = ap_CS_fsm.read()[8];
}

void execute::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void execute::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[9];
}

void execute::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void execute::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void execute::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void execute::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void execute::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[6];
}

void execute::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_pp1_stage1() {
    ap_block_pp1_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_pp1_stage1_11001() {
    ap_block_pp1_stage1_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_pp1_stage1_subdone() {
    ap_block_pp1_stage1_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_state10_pp1_stage1_iter0() {
    ap_block_state10_pp1_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_state11_pp1_stage0_iter1() {
    ap_block_state11_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_state12_pp1_stage1_iter1() {
    ap_block_state12_pp1_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_state13_pp1_stage0_iter2() {
    ap_block_state13_pp1_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_state6_pp0_stage0_iter0() {
    ap_block_state6_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_state7_pp0_stage0_iter1() {
    ap_block_state7_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_block_state9_pp1_stage0_iter0() {
    ap_block_state9_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void execute::thread_ap_condition_pp0_exit_iter0_state6() {
    if (esl_seteq<1,1,1>(exitcond_i_fu_265_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state6 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state6 = ap_const_logic_0;
    }
}

void execute::thread_ap_condition_pp1_exit_iter0_state9() {
    if (esl_seteq<1,1,1>(exitcond_fu_282_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state9 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state9 = ap_const_logic_0;
    }
}

void execute::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void execute::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void execute::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void execute::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void execute::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void execute::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter2.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void execute::thread_ap_phi_mux_index_assign_phi_fu_207_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(exitcond_reg_450.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        ap_phi_mux_index_assign_phi_fu_207_p4 = i_1_reg_480.read();
    } else {
        ap_phi_mux_index_assign_phi_fu_207_p4 = index_assign_reg_203.read();
    }
}

void execute::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void execute::thread_distance_fu_361_p2() {
    distance_fu_361_p2 = (!tmp_5_i_i_reg_490.read().is_01() || !tmp1_fu_357_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_5_i_i_reg_490.read()) + sc_biguint<32>(tmp1_fu_357_p2.read()));
}

void execute::thread_exitcond_fu_282_p2() {
    exitcond_fu_282_p2 = (!ap_phi_mux_index_assign_phi_fu_207_p4.read().is_01() || !ap_const_lv7_64.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_index_assign_phi_fu_207_p4.read() == ap_const_lv7_64);
}

void execute::thread_exitcond_i_fu_265_p2() {
    exitcond_i_fu_265_p2 = (!i_i_reg_192.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_192.read() == ap_const_lv2_3);
}

void execute::thread_grp_fu_215_p2() {
    grp_fu_215_p2 = (!query_q0.read().is_01() || !points_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(query_q0.read()) - sc_biguint<32>(points_q0.read()));
}

void execute::thread_grp_fu_221_p2() {
    grp_fu_221_p2 = (!query_q0.read().is_01() || !points_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(query_q0.read()) - sc_biguint<32>(points_q1.read()));
}

void execute::thread_grp_fu_231_p2() {
    grp_fu_231_p2 = (!reg_227.read().is_01() || !reg_227.read().is_01())? sc_lv<32>(): sc_bigint<32>(reg_227.read()) * sc_bigint<32>(reg_227.read());
}

void execute::thread_i_1_fu_342_p2() {
    i_1_fu_342_p2 = (!index_assign_reg_203.read().is_01() || !ap_const_lv7_1.is_01())? sc_lv<7>(): (sc_biguint<7>(index_assign_reg_203.read()) + sc_biguint<7>(ap_const_lv7_1));
}

void execute::thread_i_fu_271_p2() {
    i_fu_271_p2 = (!i_i_reg_192.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(i_i_reg_192.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void execute::thread_index_assign_cast2_fu_352_p1() {
    index_assign_cast2_fu_352_p1 = esl_zext<32,7>(index_assign_reg_203_pp1_iter1_reg.read());
}

void execute::thread_p_shl_cast_fu_300_p1() {
    p_shl_cast_fu_300_p1 = esl_zext<10,9>(tmp_3_fu_292_p3.read());
}

void execute::thread_points_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        points_address0 =  (sc_lv<9>) (tmp_5_cast_fu_321_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        points_address0 =  (sc_lv<9>) (ap_const_lv64_1);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        points_address0 =  (sc_lv<9>) (ap_const_lv64_0);
    } else {
        points_address0 = "XXXXXXXXX";
    }
}

void execute::thread_points_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0))) {
        points_address1 =  (sc_lv<9>) (tmp_6_cast_fu_331_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        points_address1 =  (sc_lv<9>) (tmp_4_cast_fu_310_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        points_address1 =  (sc_lv<9>) (ap_const_lv64_2);
    } else {
        points_address1 = "XXXXXXXXX";
    }
}

void execute::thread_points_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)))) {
        points_ce0 = ap_const_logic_1;
    } else {
        points_ce0 = ap_const_logic_0;
    }
}

void execute::thread_points_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)))) {
        points_ce1 = ap_const_logic_1;
    } else {
        points_ce1 = ap_const_logic_0;
    }
}

void execute::thread_q_address0() {
    q_address0 =  (sc_lv<2>) (tmp_i7_fu_277_p1.read());
}

void execute::thread_q_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        q_ce0 = ap_const_logic_1;
    } else {
        q_ce0 = ap_const_logic_0;
    }
}

void execute::thread_query_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0))) {
        query_address0 = ap_const_lv2_2;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        query_address0 = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0)))) {
        query_address0 = ap_const_lv2_0;
    } else {
        query_address0 =  (sc_lv<2>) ("XX");
    }
}

void execute::thread_query_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        query_address1 = ap_const_lv2_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        query_address1 =  (sc_lv<2>) (tmp_i7_reg_440.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        query_address1 = ap_const_lv2_2;
    } else {
        query_address1 =  (sc_lv<2>) ("XX");
    }
}

void execute::thread_query_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)))) {
        query_ce0 = ap_const_logic_1;
    } else {
        query_ce0 = ap_const_logic_0;
    }
}

void execute::thread_query_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1)))) {
        query_ce1 = ap_const_logic_1;
    } else {
        query_ce1 = ap_const_logic_0;
    }
}

void execute::thread_query_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_431.read()))) {
        query_we1 = ap_const_logic_1;
    } else {
        query_we1 = ap_const_logic_0;
    }
}

void execute::thread_result_addr_1_reg_426() {
    result_addr_1_reg_426 =  (sc_lv<1>) (ap_const_lv64_1);
}

void execute::thread_result_addr_reg_421() {
    result_addr_reg_421 =  (sc_lv<1>) (ap_const_lv64_0);
}

void execute::thread_result_address0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)))) {
        result_address0 = result_addr_reg_421.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        result_address0 =  (sc_lv<1>) (ap_const_lv64_0);
    } else {
        result_address0 =  (sc_lv<1>) ("X");
    }
}

void execute::thread_result_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1))) {
        result_address1 = result_addr_1_reg_426.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        result_address1 =  (sc_lv<1>) (ap_const_lv64_1);
    } else {
        result_address1 =  (sc_lv<1>) ("X");
    }
}

void execute::thread_result_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage1_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)))) {
        result_ce0 = ap_const_logic_1;
    } else {
        result_ce0 = ap_const_logic_0;
    }
}

void execute::thread_result_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1)))) {
        result_ce1 = ap_const_logic_1;
    } else {
        result_ce1 = ap_const_logic_0;
    }
}

void execute::thread_result_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1))) {
        result_d0 = distance_fu_361_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        result_d0 = tmp_9_i_fu_259_p2.read();
    } else {
        result_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void execute::thread_result_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1))) {
        result_d1 = index_assign_cast2_fu_352_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        result_d1 = ap_const_lv32_0;
    } else {
        result_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void execute::thread_result_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i9_fu_367_p2.read())))) {
        result_we0 = ap_const_logic_1;
    } else {
        result_we0 = ap_const_logic_0;
    }
}

void execute::thread_result_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_i9_fu_367_p2.read())))) {
        result_we1 = ap_const_logic_1;
    } else {
        result_we1 = ap_const_logic_0;
    }
}

void execute::thread_tmp1_fu_357_p2() {
    tmp1_fu_357_p2 = (!tmp_7_i_i_reg_495.read().is_01() || !tmp_3_i_i_reg_485.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_7_i_i_reg_495.read()) + sc_biguint<32>(tmp_3_i_i_reg_485.read()));
}

void execute::thread_tmp_1_cast_fu_288_p1() {
    tmp_1_cast_fu_288_p1 = esl_zext<10,7>(ap_phi_mux_index_assign_phi_fu_207_p4.read());
}

void execute::thread_tmp_3_fu_292_p3() {
    tmp_3_fu_292_p3 = esl_concat<7,2>(ap_phi_mux_index_assign_phi_fu_207_p4.read(), ap_const_lv2_0);
}

void execute::thread_tmp_3_i_fu_243_p2() {
    tmp_3_i_fu_243_p2 = (!tmp_i_reg_388.read().is_01() || !tmp_i_reg_388.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_i_reg_388.read()) * sc_bigint<32>(tmp_i_reg_388.read());
}

void execute::thread_tmp_4_cast_fu_310_p1() {
    tmp_4_cast_fu_310_p1 = esl_sext<64,10>(tmp_4_fu_304_p2.read());
}

void execute::thread_tmp_4_fu_304_p2() {
    tmp_4_fu_304_p2 = (!p_shl_cast_fu_300_p1.read().is_01() || !tmp_1_cast_fu_288_p1.read().is_01())? sc_lv<10>(): (sc_biguint<10>(p_shl_cast_fu_300_p1.read()) - sc_biguint<10>(tmp_1_cast_fu_288_p1.read()));
}

void execute::thread_tmp_4_i_i_fu_336_p2() {
    tmp_4_i_i_fu_336_p2 = (!query_q1.read().is_01() || !points_q0.read().is_01())? sc_lv<32>(): (sc_biguint<32>(query_q1.read()) - sc_biguint<32>(points_q0.read()));
}

void execute::thread_tmp_5_cast_fu_321_p1() {
    tmp_5_cast_fu_321_p1 = esl_sext<64,10>(tmp_5_fu_315_p2.read());
}

void execute::thread_tmp_5_fu_315_p2() {
    tmp_5_fu_315_p2 = (!tmp_4_fu_304_p2.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_bigint<10>(tmp_4_fu_304_p2.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void execute::thread_tmp_5_i_fu_247_p2() {
    tmp_5_i_fu_247_p2 = (!tmp_4_i_reg_394.read().is_01() || !tmp_4_i_reg_394.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_4_i_reg_394.read()) * sc_bigint<32>(tmp_4_i_reg_394.read());
}

void execute::thread_tmp_5_i_i_fu_348_p2() {
    tmp_5_i_i_fu_348_p2 = (!tmp_4_i_i_reg_474.read().is_01() || !tmp_4_i_i_reg_474.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_4_i_i_reg_474.read()) * sc_bigint<32>(tmp_4_i_i_reg_474.read());
}

void execute::thread_tmp_6_cast_fu_331_p1() {
    tmp_6_cast_fu_331_p1 = esl_sext<64,10>(tmp_6_fu_326_p2.read());
}

void execute::thread_tmp_6_fu_326_p2() {
    tmp_6_fu_326_p2 = (!tmp_4_reg_454.read().is_01() || !ap_const_lv10_2.is_01())? sc_lv<10>(): (sc_bigint<10>(tmp_4_reg_454.read()) + sc_biguint<10>(ap_const_lv10_2));
}

void execute::thread_tmp_6_i_fu_237_p2() {
    tmp_6_i_fu_237_p2 = (!query_q1.read().is_01() || !points_q1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(query_q1.read()) - sc_biguint<32>(points_q1.read()));
}

void execute::thread_tmp_7_i_fu_251_p2() {
    tmp_7_i_fu_251_p2 = (!tmp_6_i_reg_400.read().is_01() || !tmp_6_i_reg_400.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_6_i_reg_400.read()) * sc_bigint<32>(tmp_6_i_reg_400.read());
}

void execute::thread_tmp_9_i_fu_259_p2() {
    tmp_9_i_fu_259_p2 = (!tmp_fu_255_p2.read().is_01() || !tmp_5_i_reg_411.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_fu_255_p2.read()) + sc_biguint<32>(tmp_5_i_reg_411.read()));
}

void execute::thread_tmp_fu_255_p2() {
    tmp_fu_255_p2 = (!tmp_3_i_reg_406.read().is_01() || !tmp_7_i_reg_416.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_3_i_reg_406.read()) + sc_biguint<32>(tmp_7_i_reg_416.read()));
}

void execute::thread_tmp_i7_fu_277_p1() {
    tmp_i7_fu_277_p1 = esl_zext<64,2>(i_i_reg_192.read());
}

void execute::thread_tmp_i9_fu_367_p2() {
    tmp_i9_fu_367_p2 = (!distance_fu_361_p2.read().is_01() || !result_q0.read().is_01())? sc_lv<1>(): (sc_bigint<32>(distance_fu_361_p2.read()) < sc_bigint<32>(result_q0.read()));
}

void execute::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 32 : 
            if (!(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_i_fu_265_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_i_fu_265_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 128 : 
            if ((!(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(exitcond_fu_282_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            } else if (((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter2.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage0_subdone.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(exitcond_fu_282_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp1_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 256 : 
            if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp1_stage1_subdone.read())) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

void execute::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"points_address0\" :  \"" << points_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"points_ce0\" :  \"" << points_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"points_q0\" :  \"" << points_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"points_address1\" :  \"" << points_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"points_ce1\" :  \"" << points_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"points_q1\" :  \"" << points_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"q_address0\" :  \"" << q_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"q_ce0\" :  \"" << q_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"q_q0\" :  \"" << q_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_address0\" :  \"" << result_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_ce0\" :  \"" << result_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_we0\" :  \"" << result_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_d0\" :  \"" << result_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"result_q0\" :  \"" << result_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_address1\" :  \"" << result_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_ce1\" :  \"" << result_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_we1\" :  \"" << result_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"result_d1\" :  \"" << result_d1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

